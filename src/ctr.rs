// Copyright Â© 2020 SitD <sitd0813@gmail.com>
//
// This file is subject to the terms of the MIT License.
// If a copy of the MIT License was not distributed with this file, you can obtain one at https://opensource.org/licenses/MIT.

//! LEA-CTR
//! 
//! * Example
//! ```
//! use lea::ctr::{
//! 	stream_cipher::{
//! 		generic_array::arr,
//! 		NewStreamCipher, SyncStreamCipher, SyncStreamCipherSeek
//! 	},
//! 	Lea128Ctr
//! };
//!
//! let key = arr![u8; 0x0F, 0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87, 0x96, 0xA5, 0xB4, 0xC3, 0xD2, 0xE1, 0xF0];
//! let nonce = arr![u8; 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x1F];
//! let ptxt = [
//! 		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
//! 		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0219, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
//! 		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
//! 	];
//! let ctxt = [
//! 		0xF0, 0x79, 0xD4, 0xDB, 0xDB, 0xF5, 0x29, 0x4E, 0xE2, 0x36, 0x02, 0x07, 0x79, 0x34, 0xE0, 0xDA,
//! 		0x39, 0xCD, 0x32, 0x8D, 0x15, 0x46, 0x55, 0xF9, 0xF3, 0x9F, 0x4C, 0xD6, 0x1A, 0x0A, 0x15, 0xCF,
//! 		0x5F, 0xC8, 0x22, 0x45, 0xB4, 0x65, 0xDE, 0x9A, 0xBE, 0x27, 0x98, 0x9E, 0x46, 0x02, 0x1E, 0x1C
//! 	];
//!
//! let mut lea128ctr = Lea128Ctr::new(&key, &nonce);
//!
//! // Encryption
//! let mut block = ptxt.clone();
//! lea128ctr.apply_keystream(&mut block);
//! assert_eq!(block, ctxt);
//!
//! // Decryption
//! lea128ctr.seek(0);
//! let mut block = ctxt.clone();
//! lea128ctr.apply_keystream(&mut block);
//! assert_eq!(block, ptxt);
//! ```

pub use ctr::stream_cipher;

use ctr::Ctr128;

use crate::{Lea128, Lea192, Lea256};

pub type Lea128Ctr = Ctr128<Lea128>;
pub type Lea192Ctr = Ctr128<Lea192>;
pub type Lea256Ctr = Ctr128<Lea256>;

#[cfg(test)]
mod tests {
	use ctr::stream_cipher::{
		NewStreamCipher, SyncStreamCipher, SyncStreamCipherSeek, Key, Nonce,
		generic_array::arr
	};

	use super::*;

	struct TestVector<T> where
	T: NewStreamCipher {
		key:   Key<T>,
		nonce: Nonce<T>,
		ptxt:  [u8; 48],
		ctxt:  [u8; 48]
	}

	#[test]
	fn lea128ctr() {
		let test_vector: TestVector<Lea128Ctr> = TestVector {
			key:   arr![u8; 0x0F, 0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87, 0x96, 0xA5, 0xB4, 0xC3, 0xD2, 0xE1, 0xF0],
			nonce: arr![u8; 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x1F],
			ptxt:  [
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0219, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
			],
			ctxt:  [
				0xF0, 0x79, 0xD4, 0xDB, 0xDB, 0xF5, 0x29, 0x4E, 0xE2, 0x36, 0x02, 0x07, 0x79, 0x34, 0xE0, 0xDA,
				0x39, 0xCD, 0x32, 0x8D, 0x15, 0x46, 0x55, 0xF9, 0xF3, 0x9F, 0x4C, 0xD6, 0x1A, 0x0A, 0x15, 0xCF,
				0x5F, 0xC8, 0x22, 0x45, 0xB4, 0x65, 0xDE, 0x9A, 0xBE, 0x27, 0x98, 0x9E, 0x46, 0x02, 0x1E, 0x1C
			]
		};

		let mut lea128ctr = Lea128Ctr::new(&test_vector.key, &test_vector.nonce);

		// Encryption
		let mut block = test_vector.ptxt.clone();
		lea128ctr.apply_keystream(&mut block);
		assert_eq!(block, test_vector.ctxt);

		// Decryption
		lea128ctr.seek(0);
		let mut block = test_vector.ctxt.clone();
		lea128ctr.apply_keystream(&mut block);
		assert_eq!(block, test_vector.ptxt);
	}

	#[test]
	fn lea192ctr() {
		let test_vector: TestVector<Lea192Ctr> = TestVector {
			key:   arr![u8; 0x0F, 0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87, 0x96, 0xA5, 0xB4, 0xC3, 0xD2, 0xE1, 0xF0, 0xF0, 0xE1, 0xD2, 0xC3, 0xB4, 0xA5, 0x96, 0x87],
			nonce: arr![u8; 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x1F],
			ptxt:  [
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0219, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
			],
			ctxt:  [
				0x2A, 0x68, 0xBB, 0x31, 0x4E, 0x5B, 0x5C, 0x3E, 0x69, 0xEB, 0xCA, 0x22, 0x10, 0x9C, 0x54, 0x47,
				0x37, 0xA2, 0xA3, 0xFF, 0x4A, 0x16, 0x4B, 0x8F, 0x70, 0x53, 0x27, 0x0C, 0x28, 0x7F, 0x28, 0x9A,
				0xA3, 0xF5, 0xD8, 0x31, 0x1A, 0xD1, 0x4E, 0xC0, 0x18, 0xB2, 0x0D, 0xFB, 0xD4, 0x0A, 0x2E, 0xBE
			]
		};

		let mut lea192ctr = Lea192Ctr::new(&test_vector.key, &test_vector.nonce);

		// Encryption
		let mut block = test_vector.ptxt.clone();
		lea192ctr.apply_keystream(&mut block);
		assert_eq!(block, test_vector.ctxt);

		// Decryption
		lea192ctr.seek(0);
		let mut block = test_vector.ctxt.clone();
		lea192ctr.apply_keystream(&mut block);
		assert_eq!(block, test_vector.ptxt);
	}

	#[test]
	fn lea256ctr() {
		let test_vector: TestVector<Lea256Ctr> = TestVector {
			key:   arr![u8; 0x0F, 0x1E, 0x2D, 0x3C, 0x4B, 0x5A, 0x69, 0x78, 0x87, 0x96, 0xA5, 0xB4, 0xC3, 0xD2, 0xE1, 0xF0, 0xF0, 0xE1, 0xD2, 0xC3, 0xB4, 0xA5, 0x96, 0x87, 0x78, 0x69, 0x5A, 0x4B, 0x3C, 0x2D, 0x1E, 0x0F],
			nonce: arr![u8; 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x1F],
			ptxt:  [
				0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
				0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0219, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
				0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
			],
			ctxt:  [
				0x1E, 0xD5, 0x4C, 0x31, 0xE0, 0xB0, 0x68, 0x02, 0x18, 0xD1, 0xB4, 0xF6, 0x6A, 0x47, 0xF0, 0x09,
				0xC0, 0x45, 0x13, 0x24, 0x0E, 0x4A, 0xA1, 0x22, 0x85, 0x50, 0xB1, 0xF8, 0xB9, 0xAA, 0x87, 0x90,
				0x15, 0x5D, 0x28, 0x0E, 0xF5, 0x69, 0x2D, 0xB0, 0x53, 0x5A, 0xFB, 0x65, 0x12, 0xE2, 0xDB, 0x64
			]
		};

		let mut lea256ctr = Lea256Ctr::new(&test_vector.key, &test_vector.nonce);

		// Encryption
		let mut block = test_vector.ptxt.clone();
		lea256ctr.apply_keystream(&mut block);
		assert_eq!(block, test_vector.ctxt);

		// Decryption
		lea256ctr.seek(0);
		let mut block = test_vector.ctxt.clone();
		lea256ctr.apply_keystream(&mut block);
		assert_eq!(block, test_vector.ptxt);
	}
}